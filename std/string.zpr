import "std/core.zpr";

function strlen(str: i8*): int {
	var len = 0;

	for(var i = 0; str[i] != 0; ++i) len = len + 1;

	return len;
}

function strcat(dst: i8*, src: i8*): i8* {
	var end = 0;
	while(dst[end]) {
		end = end + 1;
	}

	var i = 0;
	for(; src[i]; ++i) {
		dst[end + i] = src[i];
	}

	dst[end + i] = 0;

	return dst;
}

function str_reverse(str: i8*, length: int) {
	var start = 0;
	var end = length - 1;
	while(start < end) {
		var temp = str[start];
		str[start] = str[end];
		str[end] = temp;
		start = start + 1;
		end = end - 1;
	}
}
 
function __itoa(num: int, str: i8*, base: int, negates: int): i8* {
	var i = 0;
	var isNegative = false;
 
	if(num == 0) {
		str[i] = '0';
		++i;
		str[i] = 0;
		return str;
	}
 
	if(num < 0 && base == 10 && negates) {
		isNegative = true;
		num = -num;
	}
 
	while(num != 0) {
		var rem = num % base;
		str[i] = (rem > 9)? (rem-10) + 'a' : rem + '0';
		++i;
		num /= base;
	}
 
	if(isNegative) {
		str[i] = '-';
		++i;
	}
 
	str[i] = 0;
 
	str_reverse(str, i);
 
	return str;
}

function itoa(num: int, str: i8*, base: int): i8* {
	return __itoa(num, str, base, true);
}

function uitoa(num: int, str: i8*): i8* {
	return __itoa(num, str, 10, false);
}

function atoi(str: i8*): int {
	var num = 0;
	var sign = 1;

	var i = 0;

	if(str[i] == '-') {
		sign = -1;
		++i;
	}

	while('0' <= str[i] && str[i] <= '9') {
		num *= 10;
		num += str[i] - '0';
		++i;
	}

	return num * sign;
}

// Splits a string on the first instance of a given character
// Params:
//  - str => the source string
//  - char => the character to split on
//  - head [out] => the preceding text to the string (excl.)
// Returns:
//   the string after the character (excl.)
function str_trim_to_char(str: i8*, char: i8, head: i8**): i8* {
	for(var i = 0; str[i]; ++i) {
		if(str[i] == char) {
			if(head != null) *head = str;
			str[i] = 0;
			return &str[i + 1];
		}
	}
	return str;
}

function streq(a: i8*, b: i8*): bool {
	if(strlen(a) != strlen(b)) return false;
	for(var i = 0; a[i]; ++i) {
		if(a[i] != b[i]) return false;
	}
	return true;
}

function strcpy(dst: i8*, src: i8*) {
	var length = strlen(src);
	memcpy(dst, src, length + 1);
}