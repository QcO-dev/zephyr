import "std/core.zpr";

// Updating this list requires updating token_type_to_string
var __tk_count = 0;
var TOKEN_LEFT_PAREN = 0;
var TOKEN_RIGHT_PAREN = __tk_count = __tk_count + 1;
var TOKEN_LEFT_BRACE = __tk_count = __tk_count + 1;
var TOKEN_RIGHT_BRACE = __tk_count = __tk_count + 1;
var TOKEN_COLON = __tk_count = __tk_count + 1;
var TOKEN_SEMICOLON = __tk_count = __tk_count + 1;
var TOKEN_TILDE = __tk_count = __tk_count + 1;
var TOKEN_MINUS = __tk_count = __tk_count + 1;
var TOKEN_BANG = __tk_count = __tk_count + 1;
var TOKEN_PLUS = __tk_count = __tk_count + 1;
var TOKEN_STAR = __tk_count = __tk_count + 1;
var TOKEN_SLASH = __tk_count = __tk_count + 1;
var TOKEN_PERCENT = __tk_count = __tk_count + 1;

var TOKEN_INT_LITERAL = __tk_count = __tk_count + 1;
var TOKEN_IDENTIFIER = __tk_count = __tk_count + 1;

var TOKEN_INT = __tk_count = __tk_count + 1;
var TOKEN_FUNCTION = __tk_count = __tk_count + 1;
var TOKEN_RETURN = __tk_count = __tk_count + 1;
var TOKEN_VOID = __tk_count = __tk_count + 1;

var TOKEN_ERROR = __tk_count = __tk_count + 1;
var TOKEN_EOF = __tk_count = __tk_count + 1;

struct Token {
	type: int;
	start: i8*;
	length: int;
	line: int;
}

function token_type_to_string(type: int): i8* {
	if(type == TOKEN_LEFT_PAREN) return "left-paren";
	if(type == TOKEN_RIGHT_PAREN) return "right-paren";
	if(type == TOKEN_LEFT_BRACE) return "left-brace";
	if(type == TOKEN_RIGHT_BRACE) return "right-brace";
	if(type == TOKEN_COLON) return "colon";
	if(type == TOKEN_SEMICOLON) return "semicolon";
	if(type == TOKEN_TILDE) return "tilde";
	if(type == TOKEN_MINUS) return "minus";
	if(type == TOKEN_BANG) return "bang";
	if(type == TOKEN_PLUS) return "plus";
	if(type == TOKEN_STAR) return "star";
	if(type == TOKEN_SLASH) return "slash";
	if(type == TOKEN_PERCENT) return "percent";

	if(type == TOKEN_INT_LITERAL) return "int-literal";
	if(type == TOKEN_IDENTIFIER) return "identifier";

	if(type == TOKEN_INT) return "int";
	if(type == TOKEN_FUNCTION) return "function";
	if(type == TOKEN_RETURN) return "return";
	if(type == TOKEN_VOID) return "void";

	if(type == TOKEN_ERROR) return "error";
	if(type == TOKEN_EOF) return "eof";

	return "<unknown type>";
}

function put_token_string(token: Token*) {
	// A bit of a hack
	write(stdout, token.start, token.length);
}

function eput_token_string(token: Token*) {
	// A bit of a hack
	write(stderr, token.start, token.length);
}

function File.put_token_string(token: Token*) {
	write(this.fd, token.start, token.length);
}

function print_token(token: Token*) {
	putd(token.line);
	puts(" ");
	puts(token_type_to_string(token.type));
	puts(" '");
	put_token_string(token);
	puts("'");
}