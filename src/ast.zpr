import "std/vector.zpr";

// Updating this list requires updating node_type_to_string and print_ast_depth
enum NodeType {
	OP_BWNOT,
	OP_NEG,
	OP_NOT,
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
	OP_MOD,
	OP_BWAND,
	OP_BWOR,
	OP_XOR,
	OP_LSH,
	OP_RSH,
	OP_EQUAL,
	OP_NOT_EQUAL,
	OP_LESS,
	OP_LESS_EQ,
	OP_GREATER,
	OP_GREATER_EQ,
	OP_AND,
	OP_OR,
	OP_TERNARY,
	OP_ADDROF,
	OP_DEREF,
	OP_SIZEOF,
	OP_ACCESS_SUBSCRIPT,
	OP_ACCESS_MEMBER,
	OP_ASSIGN,
	OP_PRE_INCREMENT,
	OP_PRE_DECREMENT,
	OP_POST_INCREMENT,
	OP_POST_DECREMENT,

	AST_RELATIVE,
	AST_INT_LITERAL,
	AST_CHAR_LITERAL,
	AST_STRING,
	AST_CALL,
	AST_CALL_METHOD,
	AST_DEFINE_CONST,
	AST_DEFINE_VAR,
	AST_ACCESS_VAR,
	AST_DEFINE_GLOBAL_VAR,
	AST_ACCESS_GLOBAL_VAR,
	AST_ARRAY_INIT,
	AST_EXPR_STMT,
	AST_IF,
	AST_WHILE,
	AST_FOR,
	AST_WHEN,
	AST_BRANCH,
	AST_CAST,
	AST_STRUCT,
	AST_UNION,
	AST_ENUM,
	AST_MEMBER,
	AST_CONTINUE,
	AST_BREAK,
	AST_RETURN,
	AST_FUNCTION,
	AST_BLOCK,
	AST_PROGRAM
}

// Updating this list requires updating data_type_to_string
enum DataType {
	DATA_TYPE_VOID,
	DATA_TYPE_INT,
	DATA_TYPE_I8,
	DATA_TYPE_I16,
	DATA_TYPE_I32,
	DATA_TYPE_I64,
	DATA_TYPE_ANY,
	DATA_TYPE_STRUCT,
	DATA_TYPE_UNION,
	DATA_TYPE_UNRESOLVED
}

struct Type {
	type: int; // DataType
	indirection: int;
	isArray: int;
	arrayLength: int;

	name: Token*;
	fields: Vector*;
	methods: Vector*;

	built: int;
}

enum LValue {
	LVALUE_NONE,
	LVALUE_LOCAL,
	LVALUE_GLOBAL,
	LVALUE_SUBSCRIPT,
	LVALUE_DEREF,
	LVALUE_MEMBER
}

struct Node {
	type: int; // NodeType
	position: Token*;
	lvalue: int;
	computedType: Type*;

	union {
		unary: Node*;

		binary: struct {
			lhs: Node*;
			rhs: Node*;
		};

		ternary: struct {
			lhs: Node*;
			mid: Node*;
			rhs: Node*;
		};

		conditional: struct {
			condition: Node*;
			doTrue: Node*;
			doFalse: Node*;
		};

		loop: struct {
			initial: Node*;
			condition: Node*;
			iteration: Node*;
			body: Node*;
		};

		funktion: struct {
			name: Token*;
			returnType: Type*;
			body: Node*;
			hasImplicitBody: int;

			isMethod: int;
			parent: Node*;
			parentType: Type*;

			arguments: Vector*;

			localVariableStackOffset: int;

			used: int;
		};

		block: struct {
			children: Vector*;

			hasReturned: int;

			parent: Node*;
			variables: Vector*;
			currentStackOffset: int;
		};

		literal: struct {
			type: Type*;

			az: union {
				integer: int;
				string: struct {
					chars: i8*;
					length: int;
					id: int;
				};
			};
		};

		variable: struct {
			name: Token*;
			type: Type*;
			value: Node*;

			stackOffset: int;
			unionField: int;
		};

		constant: struct {
			name: Token*;
			value: int;
		};

		member: struct {
			name: Token*;
			parent: Node*;
			value: Node*;
			memberRef: Node*;
		};

		assignment: struct {
			lhs: Node*;
			rhs: Node*;
			op: Token*;
		};

		vhen: struct {
			match: Node*;
			branches: Vector*;
			default: Node*;
		};

		branch: struct {
			values: Vector*;
			body: Node*;
		};
	};
}

function data_type_to_string(type: int): i8* {
	when(type) {
		DATA_TYPE_VOID -> return "void";
		DATA_TYPE_INT -> return "int";
		DATA_TYPE_I8 -> return "i8";
		DATA_TYPE_I16 -> return "i16";
		DATA_TYPE_I32 -> return "i32";
		DATA_TYPE_I64 -> return "i64";
		DATA_TYPE_ANY -> return "any";
		DATA_TYPE_UNRESOLVED, DATA_TYPE_STRUCT, DATA_TYPE_UNION -> {
			eputsln("Unreachable - data_type_to_string");
			return null;
		}
	}

	return "<unknown type>";
}

function struct_name_string(strukt: Type*): i8* {
	var str = malloc(strukt.name.length + 1);
	memcpy(str, strukt.name.start, strukt.name.length);
	str[strukt.name.length] = 0;
	return str;
}

function type_to_string(type: Type*): i8* {
	var baseType: i8*;

	if(type.type == DATA_TYPE_STRUCT || type.type == DATA_TYPE_UNION || type.type == DATA_TYPE_UNRESOLVED) {
		baseType = struct_name_string(type);
	}
	else {
		baseType = data_type_to_string(type.type);
	}

	var str: i8* = malloc(strlen(baseType) + type.indirection + 1);
	strcpy(str, baseType);

	for(var i = 0; i < type.indirection; ++i) {
		strcat(str, "*");
	}
	return str;
}

function node_type_to_string(type: int): i8* {
	when(type) {
		OP_BWNOT -> return "~";
		OP_NEG -> return "-";
		OP_NOT -> return "!";
		OP_ADD -> return "+";
		OP_SUB -> return "-";
		OP_MUL -> return "*";
		OP_DIV -> return "/";
		OP_MOD -> return "%";
		OP_BWAND -> return "&";
		OP_BWOR -> return "|";
		OP_XOR -> return "^";
		OP_LSH -> return "<<";
		OP_RSH -> return ">>";
		OP_EQUAL -> return "==";
		OP_NOT_EQUAL -> return "!=";
		OP_LESS -> return "<";
		OP_LESS_EQ -> return "<=";
		OP_GREATER -> return ">";
		OP_GREATER_EQ -> return ">=";
		OP_AND -> return "&&";
		OP_OR -> return "||";
		OP_TERNARY -> return "?";
		OP_ADDROF -> return "&";
		OP_DEREF -> return "*";
		OP_SIZEOF -> return "sizeof";
		OP_ACCESS_SUBSCRIPT -> return "[";
		OP_PRE_INCREMENT -> return "++";
		OP_PRE_DECREMENT -> return "--";
		OP_POST_INCREMENT -> return "++";
		OP_POST_DECREMENT -> return "--";
		AST_INT_LITERAL -> return "int literal";
		AST_CHAR_LITERAL -> return "char literal";
		AST_STRING -> return "string";
		AST_CALL -> return "call";
		AST_CALL_METHOD -> return "call method";
		AST_DEFINE_CONST -> return "define const";
		AST_DEFINE_VAR -> return "define var";
		AST_ACCESS_VAR -> return "access var";
		AST_DEFINE_GLOBAL_VAR -> return "define gvar";
		AST_ACCESS_GLOBAL_VAR -> return "access gvar";
		AST_ARRAY_INIT -> return "init array";
		AST_EXPR_STMT -> return "expr stmt";
		AST_IF -> return "if";
		AST_WHILE -> return "while";
		AST_FOR -> return "for";
		AST_WHEN -> return "when";
		AST_BRANCH -> return "branch";
		AST_CAST -> return "cast";
		AST_STRUCT -> return "struct";
		AST_UNION -> return "union";
		AST_ENUM -> return "enum";
		AST_MEMBER -> return "member";
		AST_CONTINUE -> return "continue";
		AST_BREAK -> return "break";
		AST_RETURN -> return "return";
		AST_FUNCTION -> return "function";
		AST_BLOCK -> return "block";
		AST_PROGRAM -> return "program";
	}

	return "<unknown node type>";
}

function is_unary_op(type: int): int {
	return (
		type == OP_BWNOT ||
		type == OP_NEG ||
		type == OP_NOT ||
		type == OP_ADDROF ||
		type == OP_DEREF
	);
}

function is_binary_op(type: int): int {
	return (
		type == OP_ADD ||
		type == OP_SUB ||
		type == OP_MUL ||
		type == OP_DIV ||
		type == OP_MOD ||
		type == OP_BWAND ||
		type == OP_BWOR ||
		type == OP_XOR ||
		type == OP_LSH ||
		type == OP_RSH ||
		type == OP_EQUAL ||
		type == OP_NOT_EQUAL ||
		type == OP_LESS ||
		type == OP_LESS_EQ ||
		type == OP_GREATER ||
		type == OP_GREATER_EQ ||
		type == OP_OR ||
		type == OP_AND
	);
}

function print_ast_depth(node: Node*, depth: int) {
	for(var i = 0; i < depth; ++i) puts("  ");

	if(is_unary_op(node.type)) {
		putsln(node_type_to_string(node.type));
		print_ast_depth(node.unary, depth + 1);
		return;
	}
	else if(is_binary_op(node.type)) {
		putsln(node_type_to_string(node.type));
		print_ast_depth(node.binary.lhs, depth + 1);
		putln();
		print_ast_depth(node.binary.rhs, depth + 1);
		return;
	}
	when(node.type) {
		AST_PROGRAM -> {
			for(var i = 0; i < node.block.children.size; ++i)
				print_ast_depth(node.block.children.at(i), depth);
		}
		AST_BLOCK -> {
			putsln("{");
			for(var i = 0; i < node.block.children.size; ++i)
				print_ast_depth(node.block.children.at(i), depth + 1);
			for(var i = 0; i < depth; ++i) puts("  ");
			putsln("}");
		}
		AST_FUNCTION -> {
			puts("function "); put_token_string(node.funktion.name); puts(": "); putsln(type_to_string(node.funktion.returnType));
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				puts("("); put_token_string(arg.variable.name); puts(": "); puts(type_to_string(arg.variable.type)); puts(") ");
			}
			if(node.funktion.arguments.size > 0) putln();
			if(!node.funktion.hasImplicitBody)
				print_ast_depth(node.funktion.body, depth);
		}
		AST_CALL -> {
			puts("call "); put_token_string(node.funktion.name); putln();
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				print_ast_depth(arg, depth + 1);
				if(i != node.funktion.arguments.size -1 ) putln();
			}
		}
		AST_CALL_METHOD -> {
			puts("call "); put_token_string(node.funktion.name); putln();
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				print_ast_depth(arg, depth + 1);
				if(i != node.funktion.arguments.size -1 ) putln();
			}

			for(var i = 0; i < depth; ++i) puts("  ");
			putsln("of");
			print_ast_depth(node.funktion.parent, depth + 1);
		}
		AST_EXPR_STMT -> {
			putsln("pop");
			print_ast_depth(node.unary, depth + 1);
			putln();
		}
		AST_IF -> {
			putsln("if");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putln();

			if(node.conditional.doFalse != null) {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("else");
				print_ast_depth(node.conditional.doFalse, depth + 1);
				putln();
			}
		}
		AST_WHILE -> {
			putsln("while");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putln();
		}
		AST_FOR -> {
			putsln("for");
			if(node.loop.initial != null)
				print_ast_depth(node.loop.initial, depth + 1);
			else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no initializer)");
			}

			if(node.loop.condition != null) {
				print_ast_depth(node.loop.condition, depth + 1);
				putln();
			} else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no condition)");
			}

			if(node.loop.iteration != null) {
				print_ast_depth(node.loop.iteration, depth + 1);
				putln();
			} else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no iteration)");
			}

			print_ast_depth(node.loop.body, depth + 1);
			putln();
		}
		AST_RETURN -> {
			putsln("return");
			if(node.unary != null) {
				print_ast_depth(node.unary, depth + 1);
			}
			else {
				for(var i = 0; i < depth + 1; ++i) puts("  ");
				puts("(void)");
			}
			putln();
		}
		AST_DEFINE_CONST -> {
			puts("const "); put_token_string(node.constant.name); puts(" = "); putd(node.constant.value); putln();
		}
		AST_DEFINE_VAR,AST_DEFINE_GLOBAL_VAR -> {
			puts("var "); put_token_string(node.variable.name); puts(": "); putsln(type_to_string(node.variable.type));
			if(node.variable.value != null) {
				print_ast_depth(node.variable.value, depth + 1);
				putln();
			}
		}
		AST_ACCESS_VAR,AST_ACCESS_GLOBAL_VAR -> {
			puts("(var "); put_token_string(node.variable.name); puts(")");
		}
		AST_INT_LITERAL -> {
			puts("(literal "); putd(node.literal.az.integer); puts(")");
		}
		AST_CHAR_LITERAL -> {
			puts("(literal "); putc(node.literal.az.integer); puts(")");
		}
		AST_STRING -> {
			puts("(literal "); puts(node.literal.az.string.chars); puts(")");
		}
		OP_TERNARY -> {
			putsln("?");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putsln(":");
			print_ast_depth(node.conditional.doFalse, depth + 1);
		}
		OP_SIZEOF -> {
			puts("sizeof("); puts(type_to_string(node.computedType)); puts(")");
		}
		OP_ACCESS_SUBSCRIPT -> {
			putsln("subscript [");
			print_ast_depth(node.binary.lhs, depth + 1);
			putln();
			print_ast_depth(node.binary.rhs, depth + 1);
			putln();
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("]");
		}
		AST_ARRAY_INIT -> {
			putsln("[");
			for(var i = 0; i < node.block.children.size; ++i) {
				print_ast_depth(node.block.children.at(i), depth + 1);
				putln();
			}
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("]");
		}
		OP_DEREF -> {
			putsln("*");
			print_ast_depth(node.unary, depth + 1);
		}
		AST_CAST -> {
			putsln("cast");
			print_ast_depth(node.unary, depth + 1);
			putln();
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("as "); puts(type_to_string(node.computedType));
		}
		AST_STRUCT -> {
			puts("struct "); put_token_string(node.variable.name); putln();
			for(var i = 0; i < node.computedType.fields.size; ++i) {
				print_ast_depth(node.computedType.fields.at(i), depth + 1);
			}
		}
		AST_UNION -> {
			puts("union "); put_token_string(node.variable.name); putln();
			for(var i = 0; i < node.computedType.fields.size; ++i) {
				print_ast_depth(node.computedType.fields.at(i), depth + 1);
			}
		}
		AST_ENUM -> {
			putsln("enum");
			for(var i = 0; i < node.block.children.size; ++i) {
				print_ast_depth(node.block.children.at(i), depth + 1);
			}
		}
		AST_MEMBER -> {
			put_token_string(node.variable.name); puts(": "); putsln(type_to_string(node.variable.type));
		}
		OP_ACCESS_MEMBER -> {
			puts("."); put_token_string(node.member.name); putln();
			print_ast_depth(node.member.parent, depth + 1);
		}
		AST_CONTINUE -> {
			putsln("continue");
		}
		AST_BREAK -> {
			putsln("break");
		}
		OP_ASSIGN -> {
			putsln(token_type_to_string(node.assignment.op.type));
			print_ast_depth(node.assignment.lhs, depth);
			print_ast_depth(node.assignment.rhs, depth + 1);
		}
		OP_PRE_INCREMENT -> {
			putsln("pre++");
			print_ast_depth(node.unary, depth + 1);
		}
		OP_PRE_DECREMENT -> {
			putsln("pre--");
			print_ast_depth(node.unary, depth + 1);
		}
		OP_POST_INCREMENT -> {
			putsln("post++");
			print_ast_depth(node.unary, depth + 1);
		}
		OP_POST_DECREMENT -> {
			putsln("post--");
			print_ast_depth(node.unary, depth + 1);
		}
		AST_WHEN -> {
			putsln("when");
			print_ast_depth(node.vhen.match, depth + 1);
			for(var i = 0; i < node.vhen.branches.size; i = i + 1) {
				print_ast_depth(node.vhen.branches.at(i), depth + 1);
			}
			if(node.vhen.default != null) {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("else");
				print_ast_depth(node.vhen.default, depth + 1);
			}
		}
		AST_BRANCH -> {
			for(var i = 0; i < node.branch.values.size; ++i) {
				putd(node.branch.values.at(i) as int);
				if(i != node.branch.values.size - 1) putsln(", ");
				else putln();
			}
			print_ast_depth(node.branch.body, depth + 1);
		}
		else -> {
			eputs("Cannot handle type in print_ast_depth - "); eputsln(node_type_to_string(node.type));
		}
	}
}

function print_ast(ast: Node*) {
	print_ast_depth(ast, 0);
}
