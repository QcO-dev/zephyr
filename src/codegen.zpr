import "std/core.zpr";
import "std/io.zpr";
import "std/math.zpr";
import "src/ast.zpr";

var cg_ARG_REGISTERS: i8*[6] = [ "rdi", "rsi", "rdx", "rcx", "r8", "r9" ];
var cg_lableCount = 0;
var cg_registersInUse = 0;
var cg_continueLabel = 0;
var cg_breakLabel = 0;

function Type.qualifier(): i8* {
	when(this.size()) {
		1 -> return "BYTE";
		2 -> return "WORD";
		4 -> return "DWORD";
		8 -> return "QWORD";
	}

	// Structs are interpreted as pointers which are 8 bytes
	return "QWORD";
}

function Type.rax_subregister(): i8* {
	when(this.size()) {
		1 -> return "al";
		2 -> return "ax";
		4 -> return "eax";
		8 -> return "rax";
	}

	// Structs are interpreted as pointers which are 8 bytes
	return "rax";
}

function Type.movzx(): i8* {
	if(this.size() == 1 || this.size() == 2) {
		return "movzx";
	}
	return "mov";
}

function Type.movzx_rax_subregister(): i8* {
	if(this.size() == 4) return "eax";
	return "rax";
}

function Type.reserve(): i8* {
	when(this.size()) {
		1 -> return "resb";
		2 -> return "resw";
		4 -> return "resd";
		8 -> return "resq";
	}

	// Structs are interpreted as pointers which are 8 bytes
	return "resq";
}

function cmp_suffix(type: int): i8* {
	when(type) {
		NodeType::EQUAL -> return "e";
		NodeType::NOT_EQUAL -> return "ne";
		NodeType::LESS -> return "l";
		NodeType::LESS_EQ -> return "le";
		NodeType::GREATER -> return "g";
		NodeType::GREATER_EQ -> return "ge";
	}

	eputs("Unsupported type in generate_unary_rax - "); eputs(node_type_to_string(type)); eputln();
	exit(1);
	return null;
}

function generate_addrof_rax(expr: Node*, out: File*) {
	when(expr.unary.lvalue) {
		LValue::LOCAL -> {
			out.puts("    lea rax, [rbp-"); out.putd(expr.unary.variable.stackOffset); out.putsln("]");
		}
		LValue::GLOBAL -> {
			out.puts("    lea rax, [_G"); out.put_name(&expr.unary.variable.name); out.putsln("]");
		}
		LValue::SUBSCRIPT -> {
			generate_expr_rax(expr.unary.binary.lhs, out);
			out.putsln("    push rax");
			generate_expr_rax(expr.unary.binary.rhs, out);
			out.putsln("    mov rcx, rax");
			out.putsln("    pop rax");

			out.puts("    lea rax, [rax+rcx*"); out.putd(expr.unary.computedType.size()); out.putsln("]");
		}
		LValue::MEMBER -> {
			generate_expr_rax(expr.unary.member.parent, out);
			var field = expr.unary.member.memberRef;
			out.puts("    lea rax, [rax+"); out.putd(field.variable.stackOffset); out.putsln("]");
		}
		else -> {
			eputs("Unsupported lvalue in generate_addrof_rax - "); eputd(expr.unary.lvalue); eputln();
			exit(1);
		}
	}
}

function generate_deref_rax(expr: Node*, out: File*) {
	if(expr.computedType.is_structural()) {
		generate_lvalue_rax(expr, out);
		return;
	}

	generate_expr_rax(expr.unary, out);

	out.puts("    "); out.puts(expr.computedType.movzx()); out.puts(" "); out.puts(expr.computedType.movzx_rax_subregister()); out.puts(", ");
	out.puts(expr.computedType.qualifier()); out.putsln(" [rax]");
}

function generate_unary_rax(expr: Node*, out: File*) {
	when(expr.type) {
		NodeType::BWNOT -> {
			generate_expr_rax(expr.unary, out);
			out.putsln("    not rax");
		}
		NodeType::NEG -> {
			generate_expr_rax(expr.unary, out);
			out.putsln("    neg rax");
		}
		NodeType::NOT -> {
			generate_expr_rax(expr.unary, out);
			out.putsln("    test rax, rax");
			out.putsln("    sete al");
			out.putsln("    movzx rax, al");
		}
		NodeType::ADDROF -> {
			generate_addrof_rax(expr, out);
		}
		NodeType::DEREF -> {
			generate_deref_rax(expr, out);
		}
		else -> {
			eputs("Unsupported type in generate_unary_rax - "); eputs(node_type_to_string(expr.type)); eputln();
			exit(1);
		}
	}
}

function generate_logical_or_rax(expr: Node*, out: File*) {
	var label = cg_lableCount = cg_lableCount + 1;
	generate_expr_rax(expr.binary.lhs, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    mov rax, 1");
	out.putsln("    test rcx, rcx");
	out.puts("    jne .l"); out.putd(label); out.putln();
	generate_expr_rax(expr.binary.rhs, out);
	out.putsln("    test rax, rax");
	out.putsln("    setne al");
	out.putsln("    movzx rax, al");
	out.puts(".l"); out.putd(label); out.putsln(":");
}

function generate_logical_and_rax(expr: Node*, out: File*) {
	var label = cg_lableCount = cg_lableCount + 1;
	generate_expr_rax(expr.binary.lhs, out);
	out.putsln("    test rax, rax");
	out.puts("    je .l"); out.putd(label); out.putln();
	generate_expr_rax(expr.binary.rhs, out);
	out.putsln("    test rax, rax");
	out.putsln("    setne al");
	out.putsln("    movzx rax, al");
	out.puts(".l"); out.putd(label); out.putsln(":");
}

function generate_binary_rax(expr: Node*, out: File*) {
	if(expr.type == NodeType::OR) {
		generate_logical_or_rax(expr, out);
		return;
	}
	else if(expr.type == NodeType::AND) {
		generate_logical_and_rax(expr, out);
		return;
	}

	generate_expr_rax(expr.binary.lhs, out);
	out.putsln("    push rax");
	generate_expr_rax(expr.binary.rhs, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    pop rax");

	when(expr.type) {
		NodeType::ADD -> {
			out.putsln("    add rax, rcx");
		}
		NodeType::SUB -> {
			out.putsln("    sub rax, rcx");
		}
		NodeType::MUL -> {
			out.putsln("    imul rax, rcx");
		}
		NodeType::DIV -> {
			out.putsln("    cqo");
			out.putsln("    idiv rcx");
		}
		NodeType::MOD -> {
			out.putsln("    cqo");
			out.putsln("    idiv rcx");
			out.putsln("    mov rax, rdx");
		}
		NodeType::BWAND -> {
			out.putsln("    and rax, rcx");
		}
		NodeType::BWOR -> {
			out.putsln("    or rax, rcx");
		}
		NodeType::XOR -> {
			out.putsln("    xor rax, rcx");
		}
		NodeType::LSH -> {
			out.putsln("    sal rax, cl");
		}
		NodeType::RSH -> {
			out.putsln("    sar rax, cl");
		}
		NodeType::EQUAL, NodeType::NOT_EQUAL, NodeType::LESS, NodeType::LESS_EQ, NodeType::GREATER, NodeType::GREATER_EQ -> {
			out.putsln("    cmp rax, rcx");
			out.puts("    set"); out.puts(cmp_suffix(expr.type)); out.putsln(" al");
			out.putsln("    movzx rax, al");
		}
		else -> {
			eputs("Unsupported type in generate_binary_rax - "); eputs(node_type_to_string(expr.type)); eputln();
			exit(1);
		}
	}
}

function generate_call_rax(expr: Node*, out: File*) {
	for(var i = 0; i < cg_registersInUse; ++i) {
		out.puts("    push "); out.putsln(cg_ARG_REGISTERS[i]);
	}

	var localRegUse = 0;

	for(var i = 0; i < min(expr.funktion.arguments.size, 6); ++i) {
		generate_expr_rax(expr.funktion.arguments.at(i), out);
		out.puts("    mov "); out.puts(cg_ARG_REGISTERS[i]); out.putsln(", rax");
		cg_registersInUse = cg_registersInUse + 1;
		localRegUse = localRegUse + 1;
	}

	for(var i = 0; i < expr.funktion.arguments.size - 6; ++i) {
		generate_expr_rax(expr.funktion.arguments.at(i + 6), out);
		out.putsln("    push rax");
	}

	cg_registersInUse = cg_registersInUse - localRegUse;

	out.puts("    call _F"); out.put_name(&expr.funktion.name); out.putln();

	for(var i = 0; i < cg_registersInUse; ++i) {
		out.puts("    pop "); out.putsln(cg_ARG_REGISTERS[cg_registersInUse - i - 1]);
	}
}

function generate_call_method_rax(expr: Node*, out: File*) {
	for(var i = 0; i < cg_registersInUse; ++i) {
		out.puts("    push "); out.putsln(cg_ARG_REGISTERS[i]);
	}

	var localRegUse = 1;
	cg_registersInUse = cg_registersInUse + 1;
	
	generate_expr_rax(expr.funktion.parent, out);
	out.putsln("    mov rdi, rax");

	for(var i = 0; i < min(expr.funktion.arguments.size, 5); ++i) {
		generate_expr_rax(expr.funktion.arguments.at(i), out);
		out.puts("    mov "); out.puts(cg_ARG_REGISTERS[i + 1]); out.putsln(", rax");
		cg_registersInUse = cg_registersInUse + 1;
		localRegUse = localRegUse + 1;
	}

	for(var i = 0; i < expr.funktion.arguments.size - 5; ++i) {
		generate_expr_rax(expr.funktion.arguments.at(i + 5), out);
		out.putsln("    push rax");
	}

	cg_registersInUse = cg_registersInUse - localRegUse;

	out.puts("    call _M"); out.put_name(&expr.funktion.parentType.name); out.puts("_"); out.put_name(&expr.funktion.name);
	out.putln();

	for(var i = 0; i < cg_registersInUse; ++i) {
		out.puts("    pop "); out.putsln(cg_ARG_REGISTERS[cg_registersInUse - i - 1]);
	}
}

function generate_ternary_rax(expr: Node*, out: File*) {
	generate_expr_rax(expr.conditional.condition, out);
	out.putsln("    test rax, rax");
	var falseLabel = cg_lableCount = cg_lableCount + 1;
	var endLabel = cg_lableCount = cg_lableCount + 1;

	out.puts("    je .l"); out.putd(falseLabel); out.putln();
	generate_expr_rax(expr.conditional.doTrue, out);
	out.puts("    jmp .l"); out.putd(endLabel); out.putln();

	out.puts(".l"); out.putd(falseLabel); out.putsln(":");
	generate_expr_rax(expr.conditional.doFalse, out);

	out.puts(".l"); out.putd(endLabel); out.putsln(":");
}

function generate_access_var(expr: Node*, out: File*) {
	if(expr.variable.type.isArray || expr.variable.type.is_structural()) {
		out.puts("    lea rax, [rbp-"); out.putd(expr.variable.stackOffset); out.putsln("]");
		return;
	}

	out.puts("    "); out.puts(expr.variable.type.movzx()); out.puts(" "); out.puts(expr.variable.type.movzx_rax_subregister()); out.puts(", ");
	out.puts(expr.variable.type.qualifier()); out.puts(" [rbp-"); out.putd(expr.variable.stackOffset); out.putsln("]");
}

function generate_access_global_var(expr: Node*, out: File*) {
	if(expr.variable.type.isArray || expr.variable.type.is_structural()) {
		out.puts("    lea rax, [_G"); out.put_name(&expr.variable.name); out.putsln("]");
		return;
	}

	out.puts("    "); out.puts(expr.variable.type.movzx()); out.puts(" "); out.puts(expr.variable.type.rax_subregister()); out.puts(", ");
	out.puts(expr.variable.type.qualifier()); out.puts(" [_G"); out.put_name(&expr.variable.name); out.putsln("]");
}

function generate_access_subscript(expr: Node*, out: File*) {
	generate_expr_rax(expr.binary.lhs, out);
	out.putsln("    push rax");
	generate_expr_rax(expr.binary.rhs, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    pop rax");

	out.puts("    "); out.puts(expr.computedType.movzx()); out.puts(" "); out.puts(expr.computedType.movzx_rax_subregister());
	out.puts(", "); out.puts(expr.computedType.qualifier()); out.puts(" [rax+rcx*"); out.putd(expr.computedType.size()); out.putsln("]");
}

function generate_access_member(expr: Node*, out: File*) {
	generate_expr_rax(expr.member.parent, out);
	var field = expr.member.memberRef;
	
	if(field.variable.type.isArray || field.variable.type.is_structural()) {
		out.puts("    lea rax, [rax+"); out.putd(field.variable.stackOffset); out.putsln("]");
	}
	else {
		out.puts("    "); out.puts(field.variable.type.movzx()); out.puts(" "); out.puts(field.variable.type.movzx_rax_subregister());
		out.puts(", "); out.puts(field.variable.type.qualifier()); out.puts(" [rax+"); out.putd(field.variable.stackOffset); out.putsln("]");
	}
}

function generate_copy(fields: Vector*, parentOffset: int, out: File*) {
	for(var i = 0; i < fields.size; ++i) {
		var field: Node* = fields.at(i);

		if(field.variable.type.is_structural()) {
			generate_copy(field.variable.type.fields, field.variable.stackOffset, out);
			continue;
		}

		out.puts("    mov rdx, "); out.puts(field.variable.type.qualifier()); out.puts(" [rax+"); 
		out.putd(field.variable.stackOffset + parentOffset); out.putsln("]");

		out.puts("    mov "); out.puts(field.variable.type.qualifier()); out.puts(" [rcx+"); 
		out.putd(field.variable.stackOffset + parentOffset); out.putsln("], rdx");
	}
}

function generate_lvalue_rax(expr: Node*, out: File*) {
	when(expr.lvalue) {
		LValue::LOCAL -> {
			out.puts("    lea rax, [rbp-"); out.putd(expr.variable.stackOffset); out.putsln("]");
		}
		LValue::GLOBAL -> {
			out.puts("    lea rax, [_G"); out.put_name(&expr.variable.name); out.putsln("]");
		}
		LValue::SUBSCRIPT -> {
			generate_expr_rax(expr.binary.lhs, out);
			out.putsln("    push rax");
			generate_expr_rax(expr.binary.rhs, out);
			out.putsln("    mov rcx, rax");
			out.putsln("    pop rax");

			out.puts("    lea rax, [rax+rcx*"); out.putd(expr.computedType.size()); out.putsln("]");
		}
		LValue::DEREF -> {
			generate_expr_rax(expr.unary, out);
		}
		LValue::MEMBER -> {
			generate_expr_rax(expr.member.parent, out);
			var field = expr.member.memberRef;
			
			out.puts("    lea rax, [rax+"); out.putd(field.variable.stackOffset); out.putsln("]");
		}
		else -> {
			eputsln("Unreachable - unknown lvalue in generate_lvalue_rax");
			eputd(expr.lvalue); eputln();
			exit(1);
		}
	}
}

function generate_assign_rax(expr: Node*, out: File*) {
	generate_lvalue_rax(expr.assignment.lhs, out);
	out.putsln("    push rax");
	if(expr.assignment.op.type != TokenType::EQ) {
		expr.assignment.rhs.binary.lhs.type = NodeType::RELATIVE;
	}
	generate_expr_rax(expr.assignment.rhs, out);
	out.putsln("    pop rcx");

	if(expr.computedType.is_structural()) {
		generate_copy(expr.computedType.fields, 0, out);
	}
	else {
		out.puts("    mov "); out.puts(expr.computedType.qualifier()); out.puts(" [rcx], "); out.putsln(expr.computedType.rax_subregister());
	}
}

function generate_pre_increment(expr: Node*, out: File*) {
	generate_lvalue_rax(expr.unary, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    mov rax, [rax]");
	out.putsln("    add rax, 1");
	out.puts("    mov "); out.puts(expr.computedType.qualifier()); out.puts(" [rcx], "); out.putsln(expr.computedType.rax_subregister());
}

function generate_pre_decrement(expr: Node*, out: File*) {
	generate_lvalue_rax(expr.unary, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    mov rax, [rax]");
	out.putsln("    sub rax, 1");
	out.puts("    mov "); out.puts(expr.computedType.qualifier()); out.puts(" [rcx], "); out.putsln(expr.computedType.rax_subregister());
}

function generate_post_increment(expr: Node*, out: File*) {
	generate_lvalue_rax(expr.unary, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    mov rax, [rax]");
	out.putsln("    mov rdx, rax");
	out.putsln("    add rax, 1");
	out.puts("    mov "); out.puts(expr.computedType.qualifier()); out.puts(" [rcx], "); out.putsln(expr.computedType.rax_subregister());
	out.putsln("   mov rax, rdx");
}

function generate_post_decrement(expr: Node*, out: File*) {
	generate_lvalue_rax(expr.unary, out);
	out.putsln("    mov rcx, rax");
	out.putsln("    mov rax, [rax]");
	out.putsln("    mov rdx, rax");
	out.putsln("    sub rax, 1");
	out.puts("    mov "); out.puts(expr.computedType.qualifier()); out.puts(" [rcx], "); out.putsln(expr.computedType.rax_subregister());
	out.putsln("   mov rax, rdx");
}

function generate_expr_rax(expr: Node*, out: File*) {
	if(is_unary_op(expr.type)) {
		generate_unary_rax(expr, out);
		return;
	}
	else if(is_binary_op(expr.type)) {
		generate_binary_rax(expr, out);
		return;
	}
	when(expr.type) {
		NodeType::INT_LITERAL -> {
			out.puts("    mov rax, "); out.putd(expr.literal.az.integer); out.putln();
		}
		NodeType::CHAR_LITERAL -> {
			out.puts("    mov rax, "); out.putd(expr.literal.az.integer); out.putln();
		}
		NodeType::STRING -> {
			out.puts("    lea rax, [_S"); out.putd(expr.literal.az.string.id); out.putsln("]");
		}
		NodeType::ACCESS_VAR -> {
			generate_access_var(expr, out);
		}
		NodeType::ACCESS_GLOBAL_VAR -> {
			generate_access_global_var(expr, out);
		}
		NodeType::CALL -> {
			generate_call_rax(expr, out);
		}
		NodeType::CALL_METHOD -> {
			generate_call_method_rax(expr, out);
		}
		NodeType::TERNARY -> {
			generate_ternary_rax(expr, out);
		}
		NodeType::SIZEOF -> {
			out.puts("    mov rax, "); out.putd(expr.computedType.size_offset()); out.putln();
		}
		NodeType::ACCESS_SUBSCRIPT -> {
			generate_access_subscript(expr, out);
		}
		NodeType::CAST -> {
			generate_expr_rax(expr.unary, out);
		}
		NodeType::ACCESS_MEMBER -> {
			generate_access_member(expr, out);
		}
		NodeType::ASSIGN -> {
			generate_assign_rax(expr, out);
		}
		NodeType::RELATIVE -> {
			out.putsln("    mov rax, [rax]");
		}
		NodeType::PRE_INCREMENT -> {
			generate_pre_increment(expr, out);
		}
		NodeType::PRE_DECREMENT -> {
			generate_pre_decrement(expr, out);
		}
		NodeType::POST_INCREMENT -> {
			generate_post_increment(expr, out);
		}
		NodeType::POST_DECREMENT -> {
			generate_post_decrement(expr, out);
		}
		else -> {
			eputs("Unsupported type in generate_expr_rax - "); eputs(node_type_to_string(expr.type)); eputln();
			exit(1);
		}
	}
}

function generate_if_statement(ifStmt: Node*, out: File*) {
	generate_expr_rax(ifStmt.conditional.condition, out);
	out.putsln("    test rax, rax");
	var falseLabel = cg_lableCount = cg_lableCount + 1;
	var endLabel = cg_lableCount = cg_lableCount + 1;

	out.puts("    je .l"); out.putd(falseLabel); out.putln();

	generate_statement(ifStmt.conditional.doTrue, out);

	if(ifStmt.conditional.doFalse != null) {
		out.puts("    jmp .l"); out.putd(endLabel); out.putln();
	}

	out.puts(".l"); out.putd(falseLabel); out.putsln(":");

	if(ifStmt.conditional.doFalse != null) {
		generate_statement(ifStmt.conditional.doFalse, out);
		out.puts(".l"); out.putd(endLabel); out.putsln(":");
	}
}

function generate_while_statement(whileStmt: Node*, out: File*) {
	var condLabel = cg_lableCount = cg_lableCount + 1;
	var bodyLabel = cg_lableCount = cg_lableCount + 1;
	var endLabel = cg_lableCount = cg_lableCount + 1;

	var prevContinueLabel = cg_continueLabel;
	var prevBreakLabel = cg_breakLabel;
	cg_continueLabel = condLabel;
	cg_breakLabel = endLabel;

	out.puts("    jmp .l"); out.putd(condLabel); out.putln();
	out.puts(".l"); out.putd(bodyLabel); out.putsln(":");

	generate_statement(whileStmt.conditional.doTrue, out);

	out.puts(".l"); out.putd(condLabel); out.putsln(":");
	generate_expr_rax(whileStmt.conditional.condition, out);
	out.putsln("    test rax, rax");
	out.puts("    jne .l"); out.putd(bodyLabel); out.putln();

	out.puts(".l"); out.putd(endLabel); out.putsln(":");
	cg_breakLabel = prevBreakLabel;
	cg_continueLabel = prevContinueLabel;
}

function generate_for_statement(forStmt: Node*, out: File*) {
	if(forStmt.loop.initial != null)
		generate_statement(forStmt.loop.initial, out);

	var hasCondition = forStmt.loop.condition != null;
	var condLabel = cg_lableCount = cg_lableCount + 1;
	var bodyLabel = cg_lableCount = cg_lableCount + 1;
	var endLabel = cg_lableCount = cg_lableCount + 1;
	var iterationLabel: int;

	var prevContinueLabel = cg_continueLabel;
	var prevBreakLabel = cg_breakLabel;
	cg_continueLabel = condLabel;
	cg_breakLabel = endLabel;

	if(forStmt.loop.iteration != null) {
		iterationLabel = cg_lableCount = cg_lableCount + 1;
		cg_continueLabel = iterationLabel;
	}

	if(hasCondition) {
		out.puts("    jmp .l"); out.putd(condLabel); out.putln();
	}
	
	out.puts(".l"); out.putd(bodyLabel); out.putsln(":");

	generate_statement(forStmt.loop.body, out);

	if(forStmt.loop.iteration != null) {
		out.puts(".l"); out.putd(iterationLabel); out.putsln(":");
		generate_expr_rax(forStmt.loop.iteration, out);
	}

	if(hasCondition) {
		out.puts(".l"); out.putd(condLabel); out.putsln(":");
		generate_expr_rax(forStmt.loop.condition, out);
		out.putsln("    test rax, rax");
		out.puts("    jne .l"); out.putd(bodyLabel); out.putln();
	}
	else {
		out.puts("    jmp .l"); out.putd(bodyLabel); out.putln();
	}

	out.puts(".l"); out.putd(endLabel); out.putsln(":");
	cg_breakLabel = prevBreakLabel;
	cg_continueLabel = prevContinueLabel;
}

function generate_when_statement(stmt: Node*, out: File*) {
	generate_expr_rax(stmt.vhen.match, out);

	var label = ++cg_lableCount;
	var defaultLabel: int;
	cg_lableCount += stmt.vhen.branches.size;
	defaultLabel = ++cg_lableCount;
	var endLabel = defaultLabel;
	if(stmt.vhen.default != null) endLabel = ++cg_lableCount;

	for(var i = 0; i < stmt.vhen.branches.size; ++i) {
		var case: Node* = stmt.vhen.branches.at(i);

		for(var valI = 0; valI < case.branch.values.size; ++valI) {
			var value = case.branch.values.at(valI) as int;
			out.puts("    cmp rax, "); out.putd(value); out.putln();
			out.puts("    je .l"); out.putd(label + i); out.putln();
		}
	}

	out.puts("    jmp .l"); out.putd(defaultLabel); out.putln();

	for(var i = 0; i < stmt.vhen.branches.size; ++i) {
		var case: Node* = stmt.vhen.branches.at(i);

		out.puts(".l"); out.putd(label + i); out.putsln(":");

		generate_statement(case.branch.body, out);

		out.puts("    jmp .l"); out.putd(endLabel); out.putln();
	}

	if(stmt.vhen.default != null) {
		out.puts(".l"); out.putd(defaultLabel); out.putsln(":");

		generate_statement(stmt.vhen.default, out);
	}

	out.puts(".l"); out.putd(endLabel); out.putsln(":");
}

function generate_define_var(stmt: Node*, out: File*) {
	if(stmt.variable.value != null) {
		if(stmt.variable.value.type == NodeType::ARRAY_INIT) {
			var array = stmt.variable.value;
			var itemType = copy_type(stmt.variable.type);
			itemType.indirection = itemType.indirection - 1;
			for(var i = 0; i < array.block.children.size; ++i) {
				generate_expr_rax(array.block.children.at(i), out);
				out.puts("    mov "); out.puts(itemType.qualifier()); out.puts(" [rbp-"); out.putd(stmt.variable.stackOffset - (i * itemType.size()));
				out.puts("], "); out.putsln(itemType.rax_subregister());
			}
			return;
		}

		generate_expr_rax(stmt.variable.value, out);

		if(stmt.variable.type.is_structural()) {
			out.puts("lea rcx, [rbp-"); out.putd(stmt.variable.stackOffset); out.putsln("]");
			generate_copy(stmt.variable.type.fields, 0, out);
		}
		else {
			out.puts("    mov "); out.puts(stmt.variable.type.qualifier()); out.puts(" [rbp-"); out.putd(stmt.variable.stackOffset);
			out.puts("], "); out.putsln(stmt.variable.type.rax_subregister());
		}
	}
}

function generate_statement(stmt: Node*, out: File*) {
	when(stmt.type) {
		NodeType::IF -> {
			generate_if_statement(stmt, out);
		}
		NodeType::WHILE -> {
			generate_while_statement(stmt, out);
		}
		NodeType::FOR -> {
			generate_for_statement(stmt, out);
		}
		NodeType::WHEN -> {
			generate_when_statement(stmt, out);
		}
		NodeType::RETURN -> {
			if(stmt.unary != null)
				generate_expr_rax(stmt.unary, out);
			out.putsln("    leave");
			out.putsln("    ret");
		}
		NodeType::DEFINE_VAR -> {
			generate_define_var(stmt, out);
		}
		NodeType::EXPR_STMT -> {
			generate_expr_rax(stmt.unary, out);
		}
		NodeType::BLOCK -> {
			generate_block(stmt, out);
		}
		NodeType::CONTINUE -> {
			out.puts("    jmp .l"); out.putd(cg_continueLabel); out.putln();
		}
		NodeType::BREAK -> {
			out.puts("    jmp .l"); out.putd(cg_breakLabel); out.putln();
		}
		else -> {
			eputs("Unsupported type in generate_statement - "); eputs(node_type_to_string(stmt.type)); eputln();
			exit(1);
		}
	}
}

function generate_block(block: Node*, out: File*) {
	for(var i = 0; i < block.block.children.size; ++i) {
		generate_statement(block.block.children.at(i), out);
	}
}

function generate_function(funktion: Node*, out: File*) {
	if(!funktion.funktion.isMethod) {
		out.puts("global _F"); out.put_name(&funktion.funktion.name); out.putln();
		out.puts("_F"); out.put_name(&funktion.funktion.name); out.putsln(":");
	}
	else {
		out.puts("global _M"); out.put_name(&funktion.funktion.parentType.name); 
		out.puts("_"); out.put_name(&funktion.funktion.name); out.putln();

		out.puts("_M"); out.put_name(&funktion.funktion.parentType.name);
		out.puts("_"); out.put_name(&funktion.funktion.name); out.putsln(":");
	}

	out.putsln("    push rbp");
	out.putsln("    mov rbp, rsp");

	var stackDepth = ceil_multiple(funktion.funktion.localVariableStackOffset, 16);
	if(stackDepth != 0) {
		out.puts("    sub rsp, "); out.putd(stackDepth); out.putln();
	}

	for(var i = 0; i < min(funktion.funktion.arguments.size, 6); ++i) {
		out.puts("    mov QWORD [rbp-"); out.putd((funktion.funktion.arguments.at(i) as Node*).variable.stackOffset); out.puts("], "); out.putsln(cg_ARG_REGISTERS[i]);
	}

	for(var i = 0; i < funktion.funktion.arguments.size - 6; ++i) {
		out.puts("    mov rax, QWORD [rbp+"); out.putd(8 + (8 * (funktion.funktion.arguments.size - 6 - i))); out.putsln("]");
		out.puts("    mov QWORD [rbp-"); out.putd((funktion.funktion.arguments.at(i + 6) as Node*).variable.stackOffset); out.putsln("], rax");
	}

	generate_block(funktion.funktion.body, out);
}

function Parser.generate_namespace(node: Node*, out: File*) {
	for(var i = 0; i < node.nameSpace.body.block.children.size; ++i) {
		var child: Node* = node.nameSpace.body.block.children.at(i);
		this.generate_top_level_declaration(child, out);
	}
}

function Parser.generate_top_level_declaration(node: Node*, out: File*) {
	when(node.type) {
		NodeType::FUNCTION -> {
			if(node.funktion.used)
				generate_function(node, out);
		}
		NodeType::DEFINE_GLOBAL_VAR -> {
			// Handled below (generate_program)
		}
		NodeType::DEFINE_CONST -> {
			// No code generated - expanded inline
		}
		NodeType::ENUM, NodeType::STRUCT, NodeType::UNION -> {
			// No code generated
		}
		NodeType::NAMESPACE -> {
			this.generate_namespace(node, out);
		}
		else -> {
			eputs("Unsupported type in generate_top_level_declaration - "); eputs(node_type_to_string(node.type)); eputln();
			exit(1);
		}
	}
}

function Parser.generate_program(ast: Node*, out: File*) {
	out.putsln("section .text");
	
	generate_builtin_functions(out);

	for(var i = 0; i < ast.block.children.size; ++i) {
		var node: Node* = ast.block.children.at(i);
		this.generate_top_level_declaration(node, out);
	}

	// Entry point of _start -> initialises state, calls main and exits (via syscall)
	// Uses main's return value as the exit code
	out.putsln("global _start");
	out.putsln("_start:");

	for(var i = 0; i < this.globalVars.size; ++i) {
		var variable: Node* = this.globalVars.at(i);
		var type = variable.variable.type;

		if(variable.variable.value != null) {
			if(variable.variable.value.type == NodeType::ARRAY_INIT) {
				var array = variable.variable.value;
				var itemType = copy_type(type);
				itemType.indirection = type.indirection - 1;

				for(var i = 0; i < array.block.children.size; ++i) {
					generate_expr_rax(array.block.children.at(i), out);
					out.puts("    mov "); out.puts(type.qualifier()); out.puts(" [_G");
					out.put_name(&variable.variable.name); out.puts("+"); out.putd(i * itemType.size());
					out.puts("], "); out.putsln(type.rax_subregister());
				}
				continue;
			}

			generate_expr_rax(variable.variable.value, out);

			if(type.is_structural()) {
				out.puts("    lea rcx, [_G"); out.put_name(&variable.variable.name); out.putsln("]");
				generate_copy(type.fields, 0, out);
			}
			else {
				out.puts("    mov "); out.puts(type.qualifier()); out.puts(" [_G"); out.put_name(&variable.variable.name);
				out.puts("], "); out.putsln(type.rax_subregister());
			}
		}
	}

	out.putsln("    pop rdi");
	out.putsln("    mov rsi, rsp");

	out.putsln("    call _FZmain");
	out.putsln("    mov rdi, rax");
	out.putsln("    mov rax, 60");
	out.putsln("    syscall");

	if(this.globalVars.size > 0) {
		out.putsln("section .bss");

		for(var i = 0; i < this.globalVars.size; ++i) {
			var variable: Node* = this.globalVars.at(i);

			out.puts("_G"); out.put_name(&variable.variable.name); out.puts(": ");
			
			var type = variable.variable.type;

			if(type.isArray) {
				var subType = copy_type(type);
				subType.indirection = type.indirection - 1;
				out.puts(subType.reserve()); out.puts(" "); out.putd(type.arrayLength); out.putln();
			}
			else {
				out.puts(variable.variable.type.reserve()); out.putsln(" 1");
			}
		}
	}

	if(this.strings.size > 0) {
		out.putsln("section .data");

		for(var i = 0; i < this.strings.size; ++i) {
			var str: Node* = this.strings.at(i);

			out.puts("_S"); out.putd(str.literal.az.string.id); out.puts(": db "); out.putc('"'); out.puts(str.literal.az.string.chars);
			out.putc('"'); out.putsln(", 0");
		}
	}
}